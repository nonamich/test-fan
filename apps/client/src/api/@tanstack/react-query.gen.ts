// This file is auto-generated by @hey-api/openapi-ts

import type { Options } from '@hey-api/client-axios';
import type { AxiosError } from 'axios';

import {
  queryOptions,
  infiniteQueryOptions,
  type InfiniteData,
  type UseMutationOptions,
} from '@tanstack/react-query';

import type {
  UsersControllerFindByIdData,
  UsersControllerFindAllData,
  UsersControllerFindAllError,
  UsersControllerFindAllResponse,
  AuthControllerSignupData,
  AuthControllerSignupError,
  AuthControllerSignupResponse,
  AuthControllerLoginData,
  AuthControllerLoginError,
  AuthControllerLoginResponse,
} from '../types.gen';

import {
  client,
  usersControllerCount,
  usersControllerFindById,
  usersControllerFindAll,
  authControllerSignup,
  authControllerLogin,
  authControllerMe,
} from '../services.gen';

type QueryKey<TOptions extends Options> = [
  Pick<TOptions, 'baseURL' | 'body' | 'headers' | 'path' | 'query'> & {
    _id: string;
    _infinite?: boolean;
  },
];

const createQueryKey = <TOptions extends Options>(
  id: string,
  options?: TOptions,
  infinite?: boolean,
): QueryKey<TOptions>[0] => {
  const params: QueryKey<TOptions>[0] = {
    _id: id,
    baseURL: (options?.client ?? client).getConfig().baseURL,
  } as QueryKey<TOptions>[0];
  if (infinite) {
    params._infinite = infinite;
  }
  if (options?.body) {
    params.body = options.body;
  }
  if (options?.headers) {
    params.headers = options.headers;
  }
  if (options?.path) {
    params.path = options.path;
  }
  if (options?.query) {
    params.query = options.query;
  }
  return params;
};

export const usersControllerCountQueryKey = (options?: Options) => [
  createQueryKey('usersControllerCount', options),
];

export const usersControllerCountOptions = (options?: Options) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await usersControllerCount({
        ...options,
        ...queryKey[0],
        throwOnError: true,
      });
      return data;
    },
    queryKey: usersControllerCountQueryKey(options),
  });
};

export const usersControllerFindByIdQueryKey = (
  options: Options<UsersControllerFindByIdData>,
) => [createQueryKey('usersControllerFindById', options)];

export const usersControllerFindByIdOptions = (
  options: Options<UsersControllerFindByIdData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await usersControllerFindById({
        ...options,
        ...queryKey[0],
        throwOnError: true,
      });
      return data;
    },
    queryKey: usersControllerFindByIdQueryKey(options),
  });
};

export const usersControllerFindAllQueryKey = (
  options: Options<UsersControllerFindAllData>,
) => [createQueryKey('usersControllerFindAll', options)];

export const usersControllerFindAllOptions = (
  options: Options<UsersControllerFindAllData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await usersControllerFindAll({
        ...options,
        ...queryKey[0],
        throwOnError: true,
      });
      return data;
    },
    queryKey: usersControllerFindAllQueryKey(options),
  });
};

export const usersControllerFindAllInfiniteQueryKey = (
  options: Options<UsersControllerFindAllData>,
): QueryKey<Options<UsersControllerFindAllData>> => [
  createQueryKey('usersControllerFindAll', options, true),
];

export const usersControllerFindAllInfiniteOptions = (
  options: Options<UsersControllerFindAllData>,
) => {
  return infiniteQueryOptions<
    UsersControllerFindAllResponse,
    AxiosError<UsersControllerFindAllError>,
    InfiniteData<UsersControllerFindAllResponse>,
    QueryKey<Options<UsersControllerFindAllData>>,
    | number
    | Pick<
        QueryKey<Options<UsersControllerFindAllData>>[0],
        'body' | 'headers' | 'path' | 'query'
      >
  >(
    // @ts-ignore
    {
      queryFn: async ({ pageParam, queryKey }) => {
        // @ts-ignore
        const page: Pick<
          QueryKey<Options<UsersControllerFindAllData>>[0],
          'body' | 'headers' | 'path' | 'query'
        > =
          typeof pageParam === 'object'
            ? pageParam
            : {
                query: {
                  page: pageParam,
                },
              };
        const { data } = await usersControllerFindAll({
          ...options,
          ...queryKey[0],
          body: {
            ...(queryKey[0].body as any),
            ...(page.body as any),
          },
          headers: {
            ...queryKey[0].headers,
            ...page.headers,
          },
          path: {
            ...queryKey[0].path,
            ...page.path,
          },
          query: {
            ...queryKey[0].query,
            ...page.query,
          },
          throwOnError: true,
        });
        return data;
      },
      queryKey: usersControllerFindAllInfiniteQueryKey(options),
    },
  );
};

export const authControllerSignupQueryKey = (
  options: Options<AuthControllerSignupData>,
) => [createQueryKey('authControllerSignup', options)];

export const authControllerSignupOptions = (
  options: Options<AuthControllerSignupData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await authControllerSignup({
        ...options,
        ...queryKey[0],
        throwOnError: true,
      });
      return data;
    },
    queryKey: authControllerSignupQueryKey(options),
  });
};

export const authControllerSignupMutation = () => {
  const mutationOptions: UseMutationOptions<
    AuthControllerSignupResponse,
    AxiosError<AuthControllerSignupError>,
    Options<AuthControllerSignupData>
  > = {
    mutationFn: async (options) => {
      const { data } = await authControllerSignup({
        ...options,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const authControllerLoginQueryKey = (
  options: Options<AuthControllerLoginData>,
) => [createQueryKey('authControllerLogin', options)];

export const authControllerLoginOptions = (
  options: Options<AuthControllerLoginData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await authControllerLogin({
        ...options,
        ...queryKey[0],
        throwOnError: true,
      });
      return data;
    },
    queryKey: authControllerLoginQueryKey(options),
  });
};

export const authControllerLoginMutation = () => {
  const mutationOptions: UseMutationOptions<
    AuthControllerLoginResponse,
    AxiosError<AuthControllerLoginError>,
    Options<AuthControllerLoginData>
  > = {
    mutationFn: async (options) => {
      const { data } = await authControllerLogin({
        ...options,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const authControllerMeQueryKey = (options?: Options) => [
  createQueryKey('authControllerMe', options),
];

export const authControllerMeOptions = (options?: Options) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await authControllerMe({
        ...options,
        ...queryKey[0],
        throwOnError: true,
      });
      return data;
    },
    queryKey: authControllerMeQueryKey(options),
  });
};
