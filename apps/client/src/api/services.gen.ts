// This file is auto-generated by @hey-api/openapi-ts

import {
  createClient,
  createConfig,
  type Options,
} from '@hey-api/client-axios';

import type {
  UsersControllerCountError,
  UsersControllerCountResponse,
  UsersControllerFindByIdData,
  UsersControllerFindByIdError,
  UsersControllerFindByIdResponse,
  UsersControllerFindAllData,
  UsersControllerFindAllError,
  UsersControllerFindAllResponse,
  AuthControllerSignupData,
  AuthControllerSignupError,
  AuthControllerSignupResponse,
  AuthControllerLoginData,
  AuthControllerLoginError,
  AuthControllerLoginResponse,
  AuthControllerMeError,
  AuthControllerMeResponse,
} from './types.gen';

export const client = createClient(createConfig());

export const usersControllerCount = <ThrowOnError extends boolean = false>(
  options?: Options<unknown, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    UsersControllerCountResponse,
    UsersControllerCountError,
    ThrowOnError
  >({
    ...options,
    url: '/api/v1/users/count',
  });
};

export const usersControllerFindById = <ThrowOnError extends boolean = false>(
  options: Options<UsersControllerFindByIdData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    UsersControllerFindByIdResponse,
    UsersControllerFindByIdError,
    ThrowOnError
  >({
    ...options,
    url: '/api/v1/users/{id}',
  });
};

export const usersControllerFindAll = <ThrowOnError extends boolean = false>(
  options: Options<UsersControllerFindAllData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    UsersControllerFindAllResponse,
    UsersControllerFindAllError,
    ThrowOnError
  >({
    ...options,
    url: '/api/v1/users',
  });
};

export const authControllerSignup = <ThrowOnError extends boolean = false>(
  options: Options<AuthControllerSignupData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    AuthControllerSignupResponse,
    AuthControllerSignupError,
    ThrowOnError
  >({
    ...options,
    url: '/api/v1/auth/signup',
  });
};

export const authControllerLogin = <ThrowOnError extends boolean = false>(
  options: Options<AuthControllerLoginData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    AuthControllerLoginResponse,
    AuthControllerLoginError,
    ThrowOnError
  >({
    ...options,
    url: '/api/v1/auth/login',
  });
};

export const authControllerMe = <ThrowOnError extends boolean = false>(
  options?: Options<unknown, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    AuthControllerMeResponse,
    AuthControllerMeError,
    ThrowOnError
  >({
    ...options,
    url: '/api/v1/auth/me',
  });
};
